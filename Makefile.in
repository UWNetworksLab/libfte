AR = @AR@
CC = @CC@
CXX = @CXX@
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@

THIRDPARTY_DIR = third_party

AES_DIR = $(THIRDPARTY_DIR)/aes

GMP_DIR = @gmpdir@
GMP_LIB_DIR = $(GMP_DIR)/lib
GMP_INC_DIR = $(GMP_DIR)/include

GTEST_DIR = $(THIRDPARTY_DIR)/gtest
GTEST_LIB_DIR = $(GTEST_DIR)/lib/.libs
GTEST_INC_DIR = $(GTEST_DIR)/include

REGEX2DFA_DIR = $(THIRDPARTY_DIR)/regex2dfa
REGEX2DFA_LIB_DIR = $(REGEX2DFA_DIR)/.libs
REGEX2DFA_INC_DIR = $(REGEX2DFA_DIR)/src

INSTALL_INC_DIR = @prefix@/include
INSTALL_LIB_DIR = @prefix@/lib

OPTIMIZATION_FLAGS = -O3
	CFLAGS_ = $(CFLAGS) $(OPTIMIZATION_FLAGS) -Wall
CXXFLAGS_  = $(CXXFLAGS) $(OPTIMIZATION_FLAGS) -Wall -I. -Isrc -I$(THIRDPARTY_DIR) -I$(GTEST_INC_DIR) -I$(GMP_INC_DIR) -I$(REGEX2DFA_INC_DIR)
	LDFLAGS_ = $(LDFLAGS) $(OPTIMIZATION_FLAGS) -L.libs -L$(GTEST_LIB_DIR) -L$(GMP_LIB_DIR) -L$(REGEX2DFA_LIB_DIR) -lgtest -lgmp -lfte -lregex2dfa -pthread

TARGET_MAIN = bin/main
TARGET_MAINJS = bin/main.js
OBJ_MAIN = src/main.o

TARGET_FTE_PERF_TEST = bin/fte_perf_test
TARGET_FFX_PERF_TEST = bin/ffx_perf_test
OBJ_FTE_PERF = src/fte_perf_test.o
OBJ_FFX_PERF = src/ffx_perf_test.o

# the build target executable:
TARGET_TEST = bin/test
TARGET_TESTJS = bin/test.js
OBJ_TEST = src/tests.o \
           src/fte/fte_test.o \
           src/ffx/ffx_test.o \
           src/ffx/aes_ecb_test.o \
           src/ffx/aes_cbc_mac_test.o \
           src/ffx/conversions_test.o \
           src/fte/ranking/dfa_ranker_test.o

TARGET_LIBFTE = .libs/libfte.a
OBJ_LIBFTE = src/ffx/conversions.o \
             src/ffx/aes_cbc_mac.o \
             src/ffx/aes_ecb.o \
             src/ffx/ffx.o \
             src/fte/fte.o \
             src/fte/ranking/dfa_ranker.o \
             $(THIRDPARTY_DIR)/aes/aes_modes.o \
             $(THIRDPARTY_DIR)/aes/aescrypt.o \
             $(THIRDPARTY_DIR)/aes/aeskey.o \
             $(THIRDPARTY_DIR)/aes/aestab.o

TARGET_LIBREGEX2DFA = $(REGEX2DFA_LIB_DIR)/libregex2dfa.a
TARGET_LIBGTEST = $(GTEST_LIB_DIR)/libgtest.a

default: $(TARGET_TEST) $(TARGET_MAIN) $(TARGET_FTE_PERF_TEST) $(TARGET_FFX_PERF_TEST)

%.o: %.c
	$(CC) $(CFLAGS_) -c -o $@ $<

%.o: %.cc
	$(CXX) $(CXXFLAGS_) -c -o $@ $<

$(TARGET_FFX_PERF_TEST): $(TARGET_LIBFTE) $(OBJ_FFX_PERF)
	$(CXX) $(CXXFLAGS_) $(OBJ_FFX_PERF) -o $@ $(LDFLAGS_)

$(TARGET_FTE_PERF_TEST): $(TARGET_LIBFTE) $(OBJ_FTE_PERF)
	$(CXX) $(CXXFLAGS_) $(OBJ_FTE_PERF) -o $@ $(LDFLAGS_)

$(TARGET_MAIN): $(TARGET_LIBFTE) $(OBJ_MAIN)
	$(CXX) $(CXXFLAGS_) $(OBJ_MAIN) -o $@ $(LDFLAGS_)

$(TARGET_MAINJS): $(TARGET_LIBFTE) $(OBJ_MAIN)
	$(CXX) $(CXXFLAGS_) $(OBJ_MAIN) -o $@  $(LDFLAGS_)

$(TARGET_LIBGTEST):
	cd $(GTEST_DIR) && $(MAKE)

$(TARGET_LIBREGEX2DFA):
	cd $(REGEX2DFA_DIR) && $(MAKE)

$(TARGET_TEST): $(TARGET_LIBREGEX2DFA) $(TARGET_LIBGTEST) $(TARGET_LIBFTE) $(OBJ_TEST)
	$(CXX) $(CXXFLAGS_) $(OBJ_TEST) -o $@  $(LDFLAGS_)

$(TARGET_TESTJS): $(TARGET_LIBREGEX2DFA) $(TARGET_LIBGTEST) $(TARGET_LIBFTE) $(OBJ_TEST)
	$(CXX) $(CXXFLAGS_) $(OBJ_TEST) -o $@  $(LDFLAGS_)

$(TARGET_LIBFTE): $(OBJ_LIBFTE)
	$(AR) $(ARFLAGS) $(TARGET_LIBFTE) $^

$(INSTALL_LIB_DIR):
	mkdir -p $(INSTALL_LIB_DIR)

$(INSTALL_INC_DIR):
	mkdir -p $(INSTALL_INC_DIR)

test: $(TARGET_TEST)
	$(TARGET_TEST)

install: $(INSTALL_LIB_DIR) $(INSTALL_INC_DIR)
	mkdir -p $(INSTALL_INC_DIR)/ffx
	mkdir -p $(INSTALL_INC_DIR)/fte
	mkdir -p $(INSTALL_INC_DIR)/fte/ranking
	cp -f $(TARGET_LIBFTE) $(INSTALL_LIB_DIR)
	cp -f src/ffx/*.h $(INSTALL_INC_DIR)/ffx
	cp -f src/fte/*.h $(INSTALL_INC_DIR)/fte
	cp -f src/fte/ranking/*.h $(INSTALL_INC_DIR)/fte/ranking

clean: cleanlibfte cleanlibgtest cleanlibregex2dfa

cleanlibfte:
	$(RM) $(TARGET_TESTJS)
	$(RM) $(TARGET_TEST)
	$(RM) $(TARGET_MAINJS)
	$(RM) $(TARGET_MAIN)
	$(RM) $(TARGET_LIBFTE)
	$(RM) $(OBJ_LIBFTE)
	$(RM) $(OBJ_TEST)
	$(RM) $(TARGET_FFX_PERF_TEST)
	$(RM) */*.o
	$(RM) */*/*.o

cleanlibgtest:
	cd $(GTEST_DIR) && $(MAKE) clean

cleanlibregex2dfa:
	cd $(REGEX2DFA_DIR) && $(MAKE) clean

distclean:
	rm -f config.status
	rm -f config.log
	cd $(GTEST_DIR) && $(MAKE) distclean
