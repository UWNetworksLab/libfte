AR = @AR@
CC = @CC@
CXX = @CXX@

THIRDPARTY_DIR = third_party

AES_DIR = $(THIRDPARTY_DIR)/aes

GMP_DIR = @gmpdir@
GMP_LIB_DIR = $(GMP_DIR)/lib
GMP_INC_DIR = $(GMP_DIR)/include

GTEST_DIR = $(THIRDPARTY_DIR)/gtest
GTEST_LIB_DIR = $(GTEST_DIR)/lib/.libs
GTEST_INC_DIR = $(GTEST_DIR)/include

INSTALL_INC_DIR = @prefix@/include
INSTALL_LIB_DIR = @prefix@/lib

OPTIMIZATION_FLAGS = -O3
CFLAGS_ = $(CFLAGS) $(OPTIMIZATION_FLAGS) -Wall
CXXFLAGS_  = $(CXXFLAGS) $(OPTIMIZATION_FLAGS) -std=c++11 -Wall -Isrc -I$(THIRDPARTY_DIR) -I$(GTEST_INC_DIR) -I$(GMP_INC_DIR)
LDFLAGS_ = $(LDFLAGS) $(OPTIMIZATION_FLAGS) -std=c++11 -L.libs -L$(GTEST_LIB_DIR) -L$(GMP_LIB_DIR) -lgtest -lgmp -lfte

# the build target executable:
TARGET_TEST = bin/test
TARGET_TESTJS = bin/test.js
OBJ_TEST = src/tests.o \
           src/fte/test_fte.o \
           src/ffx/test_ffx.o \
           src/ffx/test_aes_ecb.o \
           src/ffx/test_aes_cbc_mac.o \
           src/ffx/test_conversions.o \
           src/fte/ranking/test_dfa.o

TARGET_LIBFTE = .libs/libfte.a
OBJ_LIBFTE = src/ffx/conversions.o \
             src/ffx/key.o \
             src/ffx/aes_cbc_mac.o \
             src/ffx/aes_ecb.o \
             src/ffx/ffx.o \
             src/fte/fte.o \
             src/fte/ranking/sample_dfas.o \
             src/fte/ranking/dfa.o \
             $(THIRDPARTY_DIR)/aes/aes_modes.o \
             $(THIRDPARTY_DIR)/aes/aescrypt.o \
             $(THIRDPARTY_DIR)/aes/aeskey.o \
             $(THIRDPARTY_DIR)/aes/aestab.o

TARGET_LIBGTEST = $(GTEST_LIB_DIR)/libgtest.a

default: $(TARGET_TEST)

%.o: %.c
	$(CC) $(CFLAGS_) -c -o $@ $<

%.o: %.cc
	$(CXX) $(CXXFLAGS_) -c -o $@ $<

$(TARGET_LIBGTEST):
	cd $(GTEST_DIR) && $(MAKE)

$(TARGET_TEST): $(TARGET_LIBGTEST) $(TARGET_LIBFTE) $(OBJ_TEST)
	$(CXX) $(CXXFLAGS_) $(LDFLAGS_) $(OBJ_TEST) -o $@

$(TARGET_TESTJS): $(TARGET_LIBGTEST) $(TARGET_LIBFTE) $(OBJ_TEST)
	$(CXX) $(CXXFLAGS_) $(LDFLAGS_) $(OBJ_TEST) -o $@

$(TARGET_LIBFTE): $(OBJ_LIBFTE)
	$(AR) $(ARFLAGS) $(TARGET_LIBFTE) $^

$(INSTALL_LIB_DIR):
	mkdir -p $(INSTALL_LIB_DIR)

$(INSTALL_INC_DIR):
	mkdir -p $(INSTALL_INC_DIR)

install: $(INSTALL_LIB_DIR) $(INSTALL_INC_DIR)
	mkdir -p $(INSTALL_INC_DIR)/ffx
	mkdir -p $(INSTALL_INC_DIR)/fte
	mkdir -p $(INSTALL_INC_DIR)/fte/ranking
	cp -f $(TARGET_LIBFTE) $(INSTALL_LIB_DIR)
	cp -f src/ffx/*.h $(INSTALL_INC_DIR)/ffx
	cp -f src/fte/*.h $(INSTALL_INC_DIR)/fte
	cp -f src/fte/ranking/*.h $(INSTALL_INC_DIR)/fte/ranking

clean:
	$(RM) $(TARGET_MAINJS)
	$(RM) $(TARGET_MAIN)
	$(RM) $(TARGET_TESTJS)
	$(RM) $(TARGET_TEST)
	$(RM) $(TARGET_LIBFTE)
	$(RM) $(OBJ_LIBFTE)
	$(RM) $(OBJ_MAIN)
	$(RM) $(OBJ_TEST)
	cd $(GTEST_DIR) && $(MAKE) clean

distclean:
	rm -f config.status
	rm -f config.log
	cd $(GTEST_DIR) && $(MAKE) distclean
